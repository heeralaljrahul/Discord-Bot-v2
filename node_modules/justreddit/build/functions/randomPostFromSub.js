"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const options_1 = require("../types/options");
async function randomPostFromSub({ subReddit, sortType = "top", postGetLimit = 10, excludeRaw = true }) {
    var _a, _b;
    if (subReddit === null)
        return {
            error: "No sub reddit",
        };
    if (sortType === "random")
        sortType = options_1.sortTypes[Math.floor(Math.random() * options_1.sortTypes.length)];
    if (options_1.sortTypes.includes(sortType) === false)
        return {
            error: `Invalid sort type: ${sortType}`,
        };
    const redditFetch = await (0, node_fetch_1.default)(`https://www.reddit.com/r/${subReddit}/${sortType}.json?limit=${postGetLimit}`);
    const response = await redditFetch.json();
    if (typeof response.error !== "undefined")
        return {
            error: `reddit error: ${response.error}`,
        };
    const posts = (_b = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b.map((child) => child.data);
    const post = posts[Math.floor(Math.random() * posts.length)];
    if (post === null)
        return {
            error: "No post found",
        };
    return {
        image: typeof (post === null || post === void 0 ? void 0 : post.url_overridden_by_dest) === "string" ? post.url_overridden_by_dest : null,
        title: post.title,
        content: post.selftext,
        url: `https://www.reddit.com${post.permalink}`,
        subreddit: post.subreddit,
        author: post.author,
        upvotes: post.ups,
        downvotes: post.downs,
        upvoteRatio: post.upvote_ratio,
        nsfw: post.over_18,
        createdUTC: post.created_utc,
        category: post.category,
        thumbnail: post.thumbnail,
        pinned: post.pinned,
        archived: post.archived,
        awards: post.all_awardings,
        commentAmount: post.num_comments,
        html: post.selftext_html,
        raw: excludeRaw !== true ? post : null,
    };
}
exports.default = randomPostFromSub;
